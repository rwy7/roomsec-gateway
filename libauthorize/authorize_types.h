/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef authorize_TYPES_H
#define authorize_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace authorize {

struct AuthorizationReply {
  enum type {
    grant = 0,
    deny = 1
  };
};

extern const std::map<int, const char*> _AuthorizationReply_VALUES_TO_NAMES;

struct CredentialStatus {
  enum type {
    verified = 0,
    expired = 1,
    notFound = 2
  };
};

extern const std::map<int, const char*> _CredentialStatus_VALUES_TO_NAMES;

typedef struct _CredentialSpec__isset {
  _CredentialSpec__isset() : provider(false), mechanism(false) {}
  bool provider;
  bool mechanism;
} _CredentialSpec__isset;

class CredentialSpec {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  CredentialSpec() : provider(), mechanism() {
  }

  virtual ~CredentialSpec() throw() {}

  std::string provider;
  std::string mechanism;

  _CredentialSpec__isset __isset;

  void __set_provider(const std::string& val) {
    provider = val;
  }

  void __set_mechanism(const std::string& val) {
    mechanism = val;
  }

  bool operator == (const CredentialSpec & rhs) const
  {
    if (!(provider == rhs.provider))
      return false;
    if (!(mechanism == rhs.mechanism))
      return false;
    return true;
  }
  bool operator != (const CredentialSpec &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CredentialSpec & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CredentialSpec &a, CredentialSpec &b);

typedef struct _Credential__isset {
  _Credential__isset() : provider(false), token(false), time(false), signature(false) {}
  bool provider;
  bool token;
  bool time;
  bool signature;
} _Credential__isset;

class Credential {
 public:

  static const char* ascii_fingerprint; // = "C93D890311F28844166CF6E571EB3AC2";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

  Credential() : provider(), token(), time(), signature() {
  }

  virtual ~Credential() throw() {}

  std::string provider;
  std::string token;
  std::string time;
  std::string signature;

  _Credential__isset __isset;

  void __set_provider(const std::string& val) {
    provider = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  void __set_time(const std::string& val) {
    time = val;
  }

  void __set_signature(const std::string& val) {
    signature = val;
  }

  bool operator == (const Credential & rhs) const
  {
    if (!(provider == rhs.provider))
      return false;
    if (!(token == rhs.token))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(signature == rhs.signature))
      return false;
    return true;
  }
  bool operator != (const Credential &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Credential & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Credential &a, Credential &b);

typedef struct _AuthorizationRequest__isset {
  _AuthorizationRequest__isset() : resource(false), credentials(false) {}
  bool resource;
  bool credentials;
} _AuthorizationRequest__isset;

class AuthorizationRequest {
 public:

  static const char* ascii_fingerprint; // = "73295571CB133A8C6A2031C5B0282DAF";
  static const uint8_t binary_fingerprint[16]; // = {0x73,0x29,0x55,0x71,0xCB,0x13,0x3A,0x8C,0x6A,0x20,0x31,0xC5,0xB0,0x28,0x2D,0xAF};

  AuthorizationRequest() : resource() {
  }

  virtual ~AuthorizationRequest() throw() {}

  std::string resource;
  std::vector<Credential>  credentials;

  _AuthorizationRequest__isset __isset;

  void __set_resource(const std::string& val) {
    resource = val;
  }

  void __set_credentials(const std::vector<Credential> & val) {
    credentials = val;
  }

  bool operator == (const AuthorizationRequest & rhs) const
  {
    if (!(resource == rhs.resource))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    return true;
  }
  bool operator != (const AuthorizationRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthorizationRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AuthorizationRequest &a, AuthorizationRequest &b);

typedef struct _CredentialAppData__isset {
  _CredentialAppData__isset() : uid(false) {}
  bool uid;
} _CredentialAppData__isset;

class CredentialAppData {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  CredentialAppData() : uid() {
  }

  virtual ~CredentialAppData() throw() {}

  std::string uid;

  _CredentialAppData__isset __isset;

  void __set_uid(const std::string& val) {
    uid = val;
  }

  bool operator == (const CredentialAppData & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const CredentialAppData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CredentialAppData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CredentialAppData &a, CredentialAppData &b);

typedef struct _CredentialState__isset {
  _CredentialState__isset() : status(false), appData(false) {}
  bool status;
  bool appData;
} _CredentialState__isset;

class CredentialState {
 public:

  static const char* ascii_fingerprint; // = "C47D59F2C6FBBD6FBA09ECD420C4A271";
  static const uint8_t binary_fingerprint[16]; // = {0xC4,0x7D,0x59,0xF2,0xC6,0xFB,0xBD,0x6F,0xBA,0x09,0xEC,0xD4,0x20,0xC4,0xA2,0x71};

  CredentialState() : status((CredentialStatus::type)0) {
  }

  virtual ~CredentialState() throw() {}

  CredentialStatus::type status;
  CredentialAppData appData;

  _CredentialState__isset __isset;

  void __set_status(const CredentialStatus::type val) {
    status = val;
  }

  void __set_appData(const CredentialAppData& val) {
    appData = val;
  }

  bool operator == (const CredentialState & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(appData == rhs.appData))
      return false;
    return true;
  }
  bool operator != (const CredentialState &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CredentialState & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CredentialState &a, CredentialState &b);

} // namespace

#endif
