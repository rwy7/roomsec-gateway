/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "authorize_types.h"

#include <algorithm>

namespace authorize {

int _kAuthorizationReplyValues[] = {
  AuthorizationReply::grant,
  AuthorizationReply::deny
};
const char* _kAuthorizationReplyNames[] = {
  "grant",
  "deny"
};
const std::map<int, const char*> _AuthorizationReply_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kAuthorizationReplyValues, _kAuthorizationReplyNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCredentialStatusValues[] = {
  CredentialStatus::verified,
  CredentialStatus::expired,
  CredentialStatus::notFound
};
const char* _kCredentialStatusNames[] = {
  "verified",
  "expired",
  "notFound"
};
const std::map<int, const char*> _CredentialStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kCredentialStatusValues, _kCredentialStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* CredentialSpec::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t CredentialSpec::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t CredentialSpec::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->provider);
          this->__isset.provider = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mechanism);
          this->__isset.mechanism = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CredentialSpec::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CredentialSpec");

  xfer += oprot->writeFieldBegin("provider", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->provider);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mechanism", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->mechanism);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CredentialSpec &a, CredentialSpec &b) {
  using ::std::swap;
  swap(a.provider, b.provider);
  swap(a.mechanism, b.mechanism);
  swap(a.__isset, b.__isset);
}

const char* Credential::ascii_fingerprint = "C93D890311F28844166CF6E571EB3AC2";
const uint8_t Credential::binary_fingerprint[16] = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

uint32_t Credential::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->provider);
          this->__isset.provider = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->token);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->time);
          this->__isset.time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->signature);
          this->__isset.signature = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Credential::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Credential");

  xfer += oprot->writeFieldBegin("provider", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->provider);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("signature", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeBinary(this->signature);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Credential &a, Credential &b) {
  using ::std::swap;
  swap(a.provider, b.provider);
  swap(a.token, b.token);
  swap(a.time, b.time);
  swap(a.signature, b.signature);
  swap(a.__isset, b.__isset);
}

const char* AuthorizationRequest::ascii_fingerprint = "73295571CB133A8C6A2031C5B0282DAF";
const uint8_t AuthorizationRequest::binary_fingerprint[16] = {0x73,0x29,0x55,0x71,0xCB,0x13,0x3A,0x8C,0x6A,0x20,0x31,0xC5,0xB0,0x28,0x2D,0xAF};

uint32_t AuthorizationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resource);
          this->__isset.resource = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->credentials.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->credentials.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->credentials[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.credentials = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AuthorizationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AuthorizationRequest");

  xfer += oprot->writeFieldBegin("resource", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->resource);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("credentials", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->credentials.size()));
    std::vector<Credential> ::const_iterator _iter5;
    for (_iter5 = this->credentials.begin(); _iter5 != this->credentials.end(); ++_iter5)
    {
      xfer += (*_iter5).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AuthorizationRequest &a, AuthorizationRequest &b) {
  using ::std::swap;
  swap(a.resource, b.resource);
  swap(a.credentials, b.credentials);
  swap(a.__isset, b.__isset);
}

const char* CredentialAppData::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t CredentialAppData::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t CredentialAppData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CredentialAppData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CredentialAppData");

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CredentialAppData &a, CredentialAppData &b) {
  using ::std::swap;
  swap(a.uid, b.uid);
  swap(a.__isset, b.__isset);
}

const char* CredentialState::ascii_fingerprint = "C47D59F2C6FBBD6FBA09ECD420C4A271";
const uint8_t CredentialState::binary_fingerprint[16] = {0xC4,0x7D,0x59,0xF2,0xC6,0xFB,0xBD,0x6F,0xBA,0x09,0xEC,0xD4,0x20,0xC4,0xA2,0x71};

uint32_t CredentialState::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast6;
          xfer += iprot->readI32(ecast6);
          this->status = (CredentialStatus::type)ecast6;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->appData.read(iprot);
          this->__isset.appData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CredentialState::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CredentialState");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("appData", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->appData.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CredentialState &a, CredentialState &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.appData, b.appData);
  swap(a.__isset, b.__isset);
}

} // namespace
