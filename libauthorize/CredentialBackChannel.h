/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CredentialBackChannel_H
#define CredentialBackChannel_H

#include <thrift/TDispatchProcessor.h>
#include "authorize_types.h"

namespace authorize {

class CredentialBackChannelIf {
 public:
  virtual ~CredentialBackChannelIf() {}
  virtual void getState(CredentialState& _return, const Credential& credential) = 0;
};

class CredentialBackChannelIfFactory {
 public:
  typedef CredentialBackChannelIf Handler;

  virtual ~CredentialBackChannelIfFactory() {}

  virtual CredentialBackChannelIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CredentialBackChannelIf* /* handler */) = 0;
};

class CredentialBackChannelIfSingletonFactory : virtual public CredentialBackChannelIfFactory {
 public:
  CredentialBackChannelIfSingletonFactory(const boost::shared_ptr<CredentialBackChannelIf>& iface) : iface_(iface) {}
  virtual ~CredentialBackChannelIfSingletonFactory() {}

  virtual CredentialBackChannelIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CredentialBackChannelIf* /* handler */) {}

 protected:
  boost::shared_ptr<CredentialBackChannelIf> iface_;
};

class CredentialBackChannelNull : virtual public CredentialBackChannelIf {
 public:
  virtual ~CredentialBackChannelNull() {}
  void getState(CredentialState& /* _return */, const Credential& /* credential */) {
    return;
  }
};

typedef struct _CredentialBackChannel_getState_args__isset {
  _CredentialBackChannel_getState_args__isset() : credential(false) {}
  bool credential;
} _CredentialBackChannel_getState_args__isset;

class CredentialBackChannel_getState_args {
 public:

  CredentialBackChannel_getState_args() {
  }

  virtual ~CredentialBackChannel_getState_args() throw() {}

  Credential credential;

  _CredentialBackChannel_getState_args__isset __isset;

  void __set_credential(const Credential& val) {
    credential = val;
  }

  bool operator == (const CredentialBackChannel_getState_args & rhs) const
  {
    if (!(credential == rhs.credential))
      return false;
    return true;
  }
  bool operator != (const CredentialBackChannel_getState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CredentialBackChannel_getState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CredentialBackChannel_getState_pargs {
 public:


  virtual ~CredentialBackChannel_getState_pargs() throw() {}

  const Credential* credential;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CredentialBackChannel_getState_result__isset {
  _CredentialBackChannel_getState_result__isset() : success(false) {}
  bool success;
} _CredentialBackChannel_getState_result__isset;

class CredentialBackChannel_getState_result {
 public:

  CredentialBackChannel_getState_result() {
  }

  virtual ~CredentialBackChannel_getState_result() throw() {}

  CredentialState success;

  _CredentialBackChannel_getState_result__isset __isset;

  void __set_success(const CredentialState& val) {
    success = val;
  }

  bool operator == (const CredentialBackChannel_getState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CredentialBackChannel_getState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CredentialBackChannel_getState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CredentialBackChannel_getState_presult__isset {
  _CredentialBackChannel_getState_presult__isset() : success(false) {}
  bool success;
} _CredentialBackChannel_getState_presult__isset;

class CredentialBackChannel_getState_presult {
 public:


  virtual ~CredentialBackChannel_getState_presult() throw() {}

  CredentialState* success;

  _CredentialBackChannel_getState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CredentialBackChannelClient : virtual public CredentialBackChannelIf {
 public:
  CredentialBackChannelClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  CredentialBackChannelClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getState(CredentialState& _return, const Credential& credential);
  void send_getState(const Credential& credential);
  void recv_getState(CredentialState& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CredentialBackChannelProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CredentialBackChannelIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CredentialBackChannelProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CredentialBackChannelProcessor(boost::shared_ptr<CredentialBackChannelIf> iface) :
    iface_(iface) {
    processMap_["getState"] = &CredentialBackChannelProcessor::process_getState;
  }

  virtual ~CredentialBackChannelProcessor() {}
};

class CredentialBackChannelProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CredentialBackChannelProcessorFactory(const ::boost::shared_ptr< CredentialBackChannelIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CredentialBackChannelIfFactory > handlerFactory_;
};

class CredentialBackChannelMultiface : virtual public CredentialBackChannelIf {
 public:
  CredentialBackChannelMultiface(std::vector<boost::shared_ptr<CredentialBackChannelIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CredentialBackChannelMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CredentialBackChannelIf> > ifaces_;
  CredentialBackChannelMultiface() {}
  void add(boost::shared_ptr<CredentialBackChannelIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getState(CredentialState& _return, const Credential& credential) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getState(_return, credential);
    }
    ifaces_[i]->getState(_return, credential);
    return;
  }

};

} // namespace

#endif
