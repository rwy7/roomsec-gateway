/* -*- Mode: c++ -*- */

/*  Main Header File */
#ifndef _MAIN_H_
#define _MAIN_H_

 /**
 * @mainpage RoomSec Gateway
 * 
 * This is the RoomSec Gateway.  It represents the software that runs at each
 * gateway.
 */

/****************************/
/*  Namespace Documentation */
/****************************/

/**
 * @namespace roomsec
 *
 * Base roomsec interface.  All roomsec code goes into this namespace.
 */

/**
 * @namespace apache
 * 
 * Base Apache namespace.  Apache is a open source organization.  Code
 * generated by Apache Thrift depends on this namespace.
 */


/**
 * @namespace apache::thrift
 *
 * Base Thrift namespace.  This namespace contains base server and client
 * functionality which our code depends on.  It is used by all code generated
 * by Apache Thrift.
 */


/**
 * @namespace apache::thrift::transport
 *
 * Transportation protocols for client and server connections.  Contains
 * different transportation methods, such as buffered transports, and sockets.
 * It also contains all SSL handling code.
 */


/**
 * @namespace apache::thrift::protocol Protocols which specify the encoding of
 * transferred data.  Contains options such as HTTP, binary, or JSon
 * transportation. 
 */

/************************************
 * main.h function declarations
 ************************************/

#include <boost/shared_ptr.hpp>
#include <boost/program_options.hpp>

#define AUTHZ_ADDR "192.168.0.194"
#define AUTHZ_PORT 9090

#define AUTHN_ADDR "172.17.144.152"
#define AUTHN_PORT 8080

namespace po = ::boost::program_options;

namespace roomsec {
  class Gateway;
}

/**
 * Define program options and parse the option sources.  Program
 * options can be processed from a configuration file, or parsed from
 * the command line. Options are processed here, and their values are
 * stored in a returned boost::variable_map.
 */
int storeOptions(int argc, char* argv[], po::variables_map & vm);

/**
 * Initialize the logging subsystem. 
 */
int initLogging(po::variables_map& vm);

/**
 * Initialize hardware systems and libraries. These are
 * initializations which must occur before specific hardware classes
 * are instantiated.
 */
int initHardware(po::variables_map& vm);
int cleanupHardware(po::variables_map const& vm);

boost::shared_ptr<roomsec::Gateway>
buildStdGateway(po::variables_map& vm);

boost::shared_ptr<roomsec::Gateway>
buildReplGateway(po::variables_map& vm);

#endif /* _MAIN_H_ */
